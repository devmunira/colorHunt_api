openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/FSWFOFFICIAL/colorhunt_api/1.0.0
  - description: Localhost 4000 Port for development
    url: http://localhost:4000/api/v1
info:
  version: 1.0.1
  title: color-hunt-api
  description: >-
    The API for the Color Hunt Clone project. It's allow user to register, login
    then create their own color platters, update and delete and also auth user
    can like, share and download color platters and any user can explore color
    platters.
  contact:
    name: Munira Akter
    email: muniraweb@gmail.com
    url: muniraakter.com
tags:
  - name: Auth
    description: >-
      This Tag is responsible for handle all authenticated endpoints [Piublic &
      Private]
  - name: Platters
    description: >-
      This Tag is responsible for handle all platters endpoints [Piublic &
      Private]
  - name: Tags
    description: This Tag is responsible for handle all tags endpoints [Piublic & Private]
  - name: Like
    description: This Tag is responsible for handle all like endpoints [Private]
  - name: Report
    description: This Tag is responsible for handle all report endpoints [Private]
  - name: User
    description: This Tag is responsible for handle all authenticated endpoints [Private]
  - name: Settings
    description: >-
      This Tag is responsible for handle all authenticated endpoints [Piublic &
      Private]
  - name: Pages
    description: >-
      This Tag is responsible for handle all authenticated endpoints [Piublic &
      Private]
paths:
  "/auth/signup":
    post:
      description: Sign Up End Points for user registration proccess
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  format: text
                  example: munira12
                email:
                  type: string
                  format: email
                  example: muniraweb@gmail.com
                password:
                  type: string
                  format: password
                  example: password12@
                is_admin:
                  type: boolean
                  format: true / false
                  example: true
                  default: false
              required:
                - password
                - username
                - email
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Sing Up Successfully Completed!
                  data:
                    $ref: '#/components/schemas/UserAuthDTO'
        '400':
          $ref: '#/components/responses/400'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
  "/auth/signin":
    post:
      description: Sign In End Points for user login proccess
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                usernameOremail:
                  type: string
                  format: text
                  example: munira12
                password:
                  type: string
                  format: password
                  example: password12@
              required:
                - password
                - usernameOremail
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Sing In Successfully Completed!
                  data:
                    $ref: '#/components/schemas/UserAuthDTO'
        '400':
          $ref: '#/components/responses/400'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
  "/forgot-password/email-verify":
    post:
      description: Email Veify for password reset process
      tags:
        - Auth
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: muniraweb@gmail.com
              required: 
                - email
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Check your inbox for verification token
        '400':
          $ref: '#/components/responses/400'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'            
  "/forgot-password/token-verify":
    post:
      description: Token Veify for password reset process
      tags:
        - Auth
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                token:
                  type: string
                  format: int32
                  example: 658974
              required: 
                - token
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Verification Successfully Completed.
        '400':
          $ref: '#/components/responses/400'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'            
  "/forgot-password/password-reset":
    post:
      description: password reset process
      tags:
        - Auth
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  example: muni658974
              required: 
                - password
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Password Reset Successfully Completed.
        '400':
          $ref: '#/components/responses/400'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'            
  "/me/profile-update":
    post:
      description: Self Profile Update for Auth user
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: muniraweb
                email:
                  type: string
                  format: email
                  example: muniraweb@gmail.com
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Profile Update Successfully Completed.
        '400':
          $ref: '#/components/responses/400'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500' 
        '401':
          $ref: '#/components/responses/401' 
        '403':
          $ref: '#/components/responses/403' 
  "/password-change":
    post:
      description: Password Update for Auth user
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                password:
                  type: string
                  format: password
                  example: muni658974
                old_password:
                  type: string
                  format: password
                  example: muni658974
              required: 
                - password
                - old_password
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Password Reset Successfully Completed.
        '400':
          $ref: '#/components/responses/400'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
        '401':
          $ref: '#/components/responses/401' 
        '403':
          $ref: '#/components/responses/403'
  "/revoked-generate/token":
    post:
      description: Revoked Refresh token & Generate new Access Token
      tags: [Auth]
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  format: jwt
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
             
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Refresh Token revoked and Access Token Generate.
        '400':
          $ref: '#/components/responses/400'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
  "/token-verify":
    post:
      description: Verify Refresh Token
      tags: [Auth]
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  format: password
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
              required: 
                - refresh_token
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Token is valid.
                  isValid:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/400'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
  # Platters all EndPoints Start from Here
  "/platters":
    post:
      description: Create new Platters
      tags: [Platters]
      security: 
      - bearerAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
               tags:
                type: array
                items:
                  type: string
                  example: ['874635gdjfgsdf', '874635gdjfgsdf']
              allOf:
                - $ref: '#/components/schemas/plattersBodyDTO'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Platters Created Successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: 
                          $ref : '#/components/schemas/uniqueIdDTO'
                        user:
                          $ref: '#/components/schemas/userBodyDTO'
                        tags:
                          type: array
                          items:
                            $ref: '#/components/schemas/tagDTO'
                        link: 
                          type: string
                          format: url
                          example: '/platters'
                        like:
                          type: integer
                          format: int32
                          example: 1456
                      allOf:
                        - $ref : '#/components/schemas/plattersBodyDTO'
                        - $ref : '#/components/schemas/Timestamp'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: '/api/v1/platters'
                      getAllData: 
                        type: string
                        format: uri
                        example: '/api/v1/platters'
                 
        '400':
          $ref: '#/components/responses/400'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
        '401':
          $ref: '#/components/responses/401' 
        '403':
          $ref: '#/components/responses/403'
    get:
      description: All can be retrieved with like count
      tags: [Platters]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Platters Retrive Successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: 
                          $ref : '#/components/schemas/uniqueIdDTO'
                        user:
                          $ref: '#/components/schemas/userBodyDTO'
                        tags:
                          type: array
                          items:
                            $ref: '#/components/schemas/tagDTO'
                        link: 
                          type: string
                          format: url
                          example: '/platters'
                        like:
                          type: integer
                          format: int32
                          example: 1456
                      allOf:
                        - $ref : '#/components/schemas/plattersBodyDTO'
                        - $ref : '#/components/schemas/Timestamp'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: '/api/v1/platters'
                      getAllRabdom: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/random'
                      getAllCollection: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/collection'
                      getAllPopular: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/popular'
                      getAllRecents: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/recent'
                  pagination:
                    $ref : '#/components/schemas/pagination'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
  "/platters/random":
    get:
      description: All can be retrieved random platters with like count
      tags: [Platters]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Random Platters Retrive Successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: 
                          $ref : '#/components/schemas/uniqueIdDTO'
                        user:
                          $ref: '#/components/schemas/userBodyDTO'
                        tags:
                          type: array
                          items:
                            $ref: '#/components/schemas/tagDTO'
                        link: 
                          type: string
                          format: url
                          example: '/platters'
                        like:
                          type: integer
                          format: int32
                          example: 1456
                      allOf:
                        - $ref : '#/components/schemas/plattersBodyDTO'
                        - $ref : '#/components/schemas/Timestamp'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: '/api/v1/platters'
                      getAllRabdom: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/random'
                      getAllCollection: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/collection'
                      getAllPopular: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/popular'
                      getAllRecents: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/recent'
                  pagination:
                    $ref : '#/components/schemas/pagination'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
  "/platters/collection":
    get:
      description: All can be retrieved auth user conllection platters with like count
      tags: [Platters]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Collection Platters Retrive Successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: 
                          $ref : '#/components/schemas/uniqueIdDTO'
                        user:
                          $ref: '#/components/schemas/userBodyDTO'
                        tags:
                          type: array
                          items:
                            $ref: '#/components/schemas/tagDTO'
                        link: 
                          type: string
                          format: url
                          example: '/platters'
                        like:
                          type: integer
                          format: int32
                          example: 1456
                      allOf:
                        - $ref : '#/components/schemas/plattersBodyDTO'
                        - $ref : '#/components/schemas/Timestamp'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: '/api/v1/platters'
                      getAllRabdom: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/random'
                      getAllCollection: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/collection'
                      getAllPopular: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/popular'
                      getAllRecents: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/recent'
                  pagination:
                    $ref : '#/components/schemas/pagination'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
  "/platters/popular":
    get:
      description: All can be retrieved popular platters with like count
      tags: [Platters]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Popular Platters Retrive Successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: 
                          $ref : '#/components/schemas/uniqueIdDTO'
                        user:
                          $ref: '#/components/schemas/userBodyDTO'
                        tags:
                          type: array
                          items:
                            $ref: '#/components/schemas/tagDTO'
                        link: 
                          type: string
                          format: url
                          example: '/platters'
                        like:
                          type: integer
                          format: int32
                          example: 1456
                      allOf:
                        - $ref : '#/components/schemas/plattersBodyDTO'
                        - $ref : '#/components/schemas/Timestamp'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: '/api/v1/platters'
                      getAllRabdom: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/random'
                      getAllCollection: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/collection'
                      getAllPopular: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/popular'
                      getAllRecents: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/recent'
                  pagination:
                    $ref : '#/components/schemas/pagination'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
  "/platters/recents":
    get:
      description: All can be retrieved recents platters with like count
      tags: [Platters]
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Recents Platters Retrive Successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: 
                          $ref : '#/components/schemas/uniqueIdDTO'
                        user:
                          $ref: '#/components/schemas/userBodyDTO'
                        tags:
                          type: array
                          items:
                            $ref: '#/components/schemas/tagDTO'
                        link: 
                          type: string
                          format: url
                          example: '/platters'
                        like:
                          type: integer
                          format: int32
                          example: 1456
                      allOf:
                        - $ref : '#/components/schemas/plattersBodyDTO'
                        - $ref : '#/components/schemas/Timestamp'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: '/api/v1/platters'
                      getAllRabdom: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/random'
                      getAllCollection: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/collection'
                      getAllPopular: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/popular'
                      getAllRecents: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/recent'
                  pagination:
                    $ref : '#/components/schemas/pagination'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
  "/platters/{id}":
    get:
      description: Get Single Platters with full details
      tags: [Platters]
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Single Platters Retrive Successfully.
                  data:
                    type: object
                    properties:
                      id: 
                        $ref : '#/components/schemas/uniqueIdDTO'
                      user:
                        $ref: '#/components/schemas/userBodyDTO'
                      tags:
                        type: array
                        items:
                          $ref: '#/components/schemas/tagDTO'
                      link: 
                        type: string
                        format: url
                        example: '/platters/:id'
                      like:
                        type: integer
                        format: int32
                        example: 1456
                    allOf:
                      - $ref : '#/components/schemas/plattersBodyDTO'
                      - $ref : '#/components/schemas/Timestamp'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: '/api/v1/platters'
                      getAllRabdom: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/random'
                      getAllCollection: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/collection'
                      getAllPopular: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/popular'
                      getAllRecents: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/recent'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
    put:
      description: Create or Update whole Platter
      tags: [Platters]
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      security: 
      - bearerAuth: []
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
               tags:
                type: array
                items:
                  type: string
                  example: ['874635gdjfgsdf', '874635gdjfgsdf']
              allOf:
                - $ref: '#/components/schemas/plattersBodyDTO'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Platters Created or Updated Successfully.
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id: 
                          $ref : '#/components/schemas/uniqueIdDTO'
                        user:
                          $ref: '#/components/schemas/userBodyDTO'
                        tags:
                          type: array
                          items:
                            $ref: '#/components/schemas/tagDTO'
                        link: 
                          type: string
                          format: url
                          example: '/platters'
                        like:
                          type: integer
                          format: int32
                          example: 1456
                      allOf:
                        - $ref : '#/components/schemas/plattersBodyDTO'
                        - $ref : '#/components/schemas/Timestamp'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: '/api/v1/platters/:id'
                      getAllData: 
                        type: string
                        format: uri
                        example: '/api/v1/platters'
        '400':
          $ref: '#/components/responses/400'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
        '401':
          $ref: '#/components/responses/401' 
        '403':
          $ref: '#/components/responses/403'
    patch:
      description: Update exiting Platter
      tags: [Platters]
      security: 
      - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
               tags:
                type: array
                items:
                  type: string
                  example: ['874635gdjfgsdf', '874635gdjfgsdf']
              allOf:
                - $ref: '#/components/schemas/plattersBodyDTO'
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 204
                  message:
                    type: string
                    example: Platters Updated Successfully.
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: '/api/v1/platters/:id'
                      getAllData: 
                        type: string
                        format: uri
                        example: '/api/v1/platters'
        '400':
          $ref: '#/components/responses/400'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
        '401':
          $ref: '#/components/responses/401' 
        '403':
          $ref: '#/components/responses/403'
    delete:
      description: Delete Single Platters
      tags: [Platters]
      security:
        - bearerAuth : []
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 204
                  message:
                    type: string
                    example: Single Platters Deleted Successfully.
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: '/api/v1/platters'
                      getAllRabdom: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/random'
                      getAllCollection: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/collection'
                      getAllPopular: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/popular'
                      getAllRecents: 
                        type: string
                        format: uri
                        example: '/api/v1/platters/recent'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
  # "/platters/:tagSlug":
  "/platters/{id}/like":
    post:
      description: Like an Exiitng Platetrs
      tags: [Like]
      security: 
      - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Like added Successfully.
                  data:
                    type: object
                    properties:
                      id: 
                        $ref : '#/components/schemas/uniqueIdDTO'
                      userId:
                        $ref: '#/components/schemas/uniqueIdDTO'
                      platterId:
                        $ref: '#/components/schemas/uniqueIdDTO'
                      totalLike:
                        type: integer
                        format: int32
                        example: 1456
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: '/api/v1/platters:id/like'
                      getAllData: 
                        type: string
                        format: uri
                        example: '/api/v1/platters'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
        '401':
          $ref: '#/components/responses/401' 
        '403':
          $ref: '#/components/responses/403'
  "/platters/{id}/dislike":
    post:
      description: Dislike an Exiitng Platetrs
      tags: [Like]
      security: 
      - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 204
                  message:
                    type: string
                    example: Like remove Successfully.
                  data:
                    type: object
                    properties:
                      id: 
                        $ref : '#/components/schemas/uniqueIdDTO'
                      userId:
                        $ref: '#/components/schemas/uniqueIdDTO'
                      platterId:
                        $ref: '#/components/schemas/uniqueIdDTO'
                      totalLike:
                        type: integer
                        format: int32
                        example: 1455
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: '/api/v1/platters:id/dislike'
                      getAllData: 
                        type: string
                        format: uri
                        example: '/api/v1/platters'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'
        '401':
          $ref: '#/components/responses/401' 
        '403':
          $ref: '#/components/responses/403'
          
          
  # User all EndPoints Start from Here
  "/users":
    get:
      description: Retrive all users according to search params with pagination
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/sort_type'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: Retrive all users according to search params with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int31
                    example: 200
                  message:
                    type: string
                    format: string
                    example: Success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int32
                          example: 1
                        username:
                          type: string
                          example: user_one
                        email:
                          type: string
                          example: muniraweb@gmail.com
                        is_admin:
                          type: boolean
                          example: false
                        link:
                          type: string
                          format: url
                          example: /users/1
                      required:
                        - id
                        - name
                        - email
                        - status
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /users/search?q=test&page=1&limit=10&status=active
                      nextPage:
                        type: string
                        format: url
                        example: /users/2/search?q=test&page=2&limit=10
                      prevPage:
                        type: string
                        format: url
                        example: /users/1/search?q=test&page=1&limit=10
                  pagination:
                    $ref: '#/components/schemas/pagination'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    post:
      description: Create new User [Private]
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        description: User Body
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  format: string
                  example: munira
                email:
                  type: string
                  format: email
                  example: muniraweb@gmail.com
                is_admin:
                  type: boolean
                  example: false
              required: [name,email]
      responses:
        '201':
          description: User Created Successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/userBodyDTO'
                  - $ref: '#/components/schemas/Timestamp'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  "/users/{id}":
    get:
      description: get users with their associated platters + platters Like + own report + blame with report
      tags: [User]
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: Sucessfully get User
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    format: string
                    example: Success
                  data:
                    type: object
                    properties:
                      platters:
                        type: array
                        items:
                          type: object
                          properties:
                            id: 
                              $ref : '#/components/schemas/uniqueIdDTO'
                            tags:
                              type: array
                              items:
                                $ref: '#/components/schemas/tagDTO'
                            link: 
                              type: string
                              format: url
                              example: '/users/:id/platters'
                            like:
                              type: integer
                              format: int32
                              example: 1456
                        
                          allOf:
                            - $ref : '#/components/schemas/plattersBodyDTO'
                            - $ref : '#/components/schemas/Timestamp'
                      Postreports:
                        type: array
                        items:
                          type: object
                          properties:
                            id: 
                              $ref : '#/components/schemas/uniqueIdDTO'
                            reports:
                              type: string
                              format: text
                              example: Irelavents Color Platte 
                            platteId:
                              $ref : '#/components/schemas/uniqueIdDTO'
                            link: 
                              type: string
                              format: url
                              example: '/users/:id/reports'
                          allOf:
                            - $ref : '#/components/schemas/Timestamp'
                      getReports:
                        type: array
                        items:
                          type: object
                          properties:
                            reportId: 
                              $ref : '#/components/schemas/uniqueIdDTO'
                            reports:
                              type: string
                              format: text
                              example: Irelavents Color Platte 
                            platteId:
                              $ref : '#/components/schemas/uniqueIdDTO'
                            userId:
                              $ref : '#/components/schemas/uniqueIdDTO'
                            link: 
                              type: string
                              format: url
                              example: '/api/v1/users/:id/reports'
                          allOf:
                            - $ref : '#/components/schemas/Timestamp'
                            
                    allOf:
                      - $ref : '#/components/schemas/userBodyDTO'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: text
                        example: 'api/v1/users/:id/reports'
                      getPlatter:
                        type: string
                        format: text
                        example: 'api/v1/platters/:id'
                      getReports:
                        type: string
                        format: text
                        example: 'api/v1/reports/:id'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
    put:
      description: Update or Create new User [Private]
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        description: Post Body
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  format: string
                  example: munira
                email:
                  type: string
                  format: email
                  example: muniraweb@gmail.com
                status:
                  type: string
                  example: active
                  enum:
                    - active
                    - inactive
                    - blocked
              required: [name,email]
      responses:
        '201':
          description: user Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userBodyDTO'
        '200':
          description: Article Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userBodyDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    patch:
      security:
        - bearerAuth: []
      description: Upadate Spacific some columns
      tags: [User]
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                username:
                  type: string
                  format: string
                  example: munira
                email:
                  type: string
                  format: email
                  example: muniraweb@gmail.com
                status:
                  type: string
                  example: active
                  enum:
                    - active
                    - inactive
                    - blocked
      responses:
        '200':
          description: User Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userBodyDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
    delete:
      security:
        - bearerAuth: []
      description: Delete User
      tags: [User]
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: User Deleted Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int31
                    example: 404
                  message:
                    type: string
                    format: string
                    example: Data deleted successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
 
  
  # Tags all EndPoints Start from Here
  "/tags":
    get:
      description: Retrive all Tag according to search params with pagination
      tags:
        - Tags
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/sort_type'
        - $ref: '#/components/parameters/search'
      responses:
        '200':
          description: Retrive all Tags according to search params with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int31
                    example: 200
                  message:
                    type: string
                    format: string
                    example: Success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int32
                          example: 1
                        name:
                          type: string
                          example: tag one
                        slug:
                          type: string
                          example: user-one
                        
                        link:
                          type: string
                          format: url
                          example: /tags
                      required:
                        - id
                        - name
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /tags/search?q=pink&page=1&limit=10
                      nextPage:
                        type: string
                        format: url
                        example: /tags/2/search?q=pink&page=2&limit=10
                      prevPage:
                        type: string
                        format: url
                        example: /tags/1/search?q=test&page=1&limit=10
                  pagination:
                    $ref: '#/components/schemas/pagination'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    post:
      description: Create new Tags [Private]
      tags:
        - Tags
      security:
        - bearerAuth: []
      requestBody:
        description: tag Body
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  format: string
                  example: orange
              required: [name]
      responses:
        '201':
          description: Tag Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tagDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  "/tags/{id}":
    get:
      description: get tag with their associated platters + platters Like
      tags: [Tags]
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: Sucessfully get Tag
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    format: string
                    example: Success
                  data:
                    type: object
                    properties:
                      platters : 
                        type: array
                        items:
                          type: object
                          properties:
                            id: 
                              $ref : '#/components/schemas/uniqueIdDTO'
                            
                            user:
                              type: array
                              items:
                                $ref: '#/components/schemas/userBodyDTO'
                            like:
                              type: integer
                              format: int32
                              example: 1456
                          allOf:
                            - $ref : '#/components/schemas/plattersBodyDTO'
                      link: 
                        type: string
                        format: url
                        example: '/api/v1/tags/:id'
                    allOf:
                      - $ref : '#/components/schemas/tagDTO'
                      - $ref : '#/components/schemas/Timestamp'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: '/api/v1/tags/:id'
                      getPlatter:
                        type: string
                        format: url
                        example: '/api/v1/platters/:id'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
    put:
      description: Update or Create new Tag [Private]
      tags:
        - Tags
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        description: Post Body
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  format: string
                  example: pink
              required: [name]
      responses:
        '201':
          description: Tag Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tagDTO'
        '200':
          description: Tag Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tagDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - bearerAuth: []
      description: Delete Tag
      tags: [Tags]
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: Tag Deleted Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int31
                    example: 400
                  message:
                    type: string
                    format: string
                    example: Tag deleted successfully
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'

  
  # Reports all EndPoints Start from Here
  "/reports":
    post:
      description: Create new Report [Private]
      tags:
        - Report
      security:
        - bearerAuth: []
      requestBody:
        description: Report Body
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    userId:
                      type: integer
                      format: int32
                      example: 35
                    plattersId:
                      type: integer
                      format: int32
                      example: 35
                    report:
                      type: string
                      format: text
                      example: this is a report
                    status:
                      type: string
                      format: text
                      example : pending
                      enum : [pending , resolved , underobserve , rejected]
                  required: [userId,plattersId, report]
      responses:
        '201':
          description: Report Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reports'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    get:
      description: Retrive all Report according to search params with pagination
      tags:
        - Report
      security:
        - bearerAuth : []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/sort_type'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/status'
      responses:
        '200':
          description: Retrive all Report according to search params with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int31
                    example: 200
                  message:
                    type: string
                    format: string
                    example: Success
                  data:
                    type: array
                    items:
                      $ref : '#/components/schemas/reports'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: /reports/search?q=pink&page=1&limit=10
                      nextPage:
                        type: string
                        format: url
                        example: /reports/2/search?q=pink&page=2&limit=10
                      prevPage:
                        type: string
                        format: url
                        example: /reports/1/search?q=test&page=1&limit=10
                  pagination:
                    $ref: '#/components/schemas/pagination'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  "/reports/{id}":
    patch:
      security:
        - bearerAuth: []
      description: Upadate Spacific some columns only own comments 
      tags: [Comment]
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                report:
                  type: string
                  format: text
                  example: this is a comment
                status:
                  type: string
                  example : resolved
              required: [report]
      responses:
        '200':
          description: Report Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reports'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
    delete:
      security:
        - bearerAuth: []
      description: Delete Report only own comments can be deleted by user
      tags: [Report]
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: Report Deleted Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int31
                    example: 400
                  message:
                    type: string
                    format: string
                    example: Data deleted successfully
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
    get:
      description: get report with their associated platters and user details
      tags:
        - Report
      security:
        - bearerAuth : []
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: Sucessfully get Report
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    format: string
                    example: Success
                  data:
                    type: object
                    properties:
                      platters : 
                        type: array
                        items:
                          type: object
                          properties:
                            id: 
                              $ref : '#/components/schemas/uniqueIdDTO'
                            
                            user:
                              type: array
                              items:
                                $ref: '#/components/schemas/userBodyDTO'
                            like:
                              type: integer
                              format: int32
                              example: 1456
                          allOf:
                            - $ref : '#/components/schemas/plattersBodyDTO'
                      link: 
                        type: string
                        format: url
                        example: '/api/v1/reports/:id'
                    allOf:
                      - $ref : '#/components/schemas/reports'
                      - $ref : '#/components/schemas/Timestamp'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: '/api/v1/reports/:id'
                      getPlatter:
                        type: string
                        format: url
                        example: '/api/v1/platters/:id'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
        
      
  
  # Settings all EndPoints Start from Here
  "/settings/:id":
    get:
      description: Get first Settings enties
      tags:
        - Settings
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: Sucessfully get Settings
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    format: string
                    example: Success
                  data:
                    $ref : '#/components/schemas/settingsResponseBody'
        
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
    patch:
      security:
        - bearerAuth: []
      description: Upadate Spacific some columns only settings 
      tags: [Settings]
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          "application/json":
            schema:
              $ref : '#/components/schemas/settingsRequestBody'
      responses:
        '200':
          description: Settings Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsResponseBody'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
  
  
  # Page all EndPoints Start from Here
  "/pages":
    get:
      description: Get All Page enties
      tags:
        - Pages
      responses:
        '200':
          description: Sucessfully get data
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    format: string
                    example: Success
                  data:
                    type: array
                    items:
                      $ref : '#/components/schemas/pagesResponseBody'
        
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
    post:
      description: Create new Page [Private]
      tags:
        - Pages
      security:
        - bearerAuth: []
      requestBody:
        description: Request Body
        content:
          application/json:
            schema:
              $ref : '#/components/schemas/pagesRequestBody'
      responses:
        '201':
          description: Data Created Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesResponseBody'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  "/pages/{id}":
    get:
      description: Get Page enties
      tags:
        - Pages
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: Sucessfully get data
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    format: string
                    example: Success
                  data:
                    $ref : '#/components/schemas/pagesResponseBody'
        
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
    patch:
      security:
        - bearerAuth: []
      description: Upadate Spacific some columns 
      tags: [Settings]
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          "application/json":
            schema:
              $ref : '#/components/schemas/pagesRequestBody'
      responses:
        '200':
          description: Settings Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pagesResponseBody'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
    delete:
      security:
        - bearerAuth: []
      description: Delete Page 
      tags: [Pages]
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: Data Deleted Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int31
                    example: 400
                  message:
                    type: string
                    format: string
                    example: Data deleted successfully
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
        '404':
          $ref: '#/components/responses/404'
      
          
          
          
  
        
      
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    page:
      in: query
      name: page
      description: Current Page Number for handle Pagination
      schema:
        type: integer
        format: int31
        example: 2
    tag:
      in: query
      name: category
      description: Get spacific category posts
      schema:
        type: integer
        format: int31
        example: 2
    userId:
      in: query
      name: userId
      description: Get spacific user platters
      schema:
        type: integer
        format: int31
        example: 15
    status:
      in: query
      name: status
      description: Get spacific status items
      schema:
        type: string
        format: string
        example: active
    limit:
      in: query
      name: limit
      description: Data Redered limit Number for handle Pagination
      schema:
        type: integer
        format: int31
        example: 2
    sort_by:
      in: query
      name: sort_by
      description: Data Sorting Field
      schema:
        type: string
        format: string
        example: title
    sort_type:
      in: query
      name: sort_type
      description: Data Sorting Type (ase,desc)
      schema:
        type: string
        format: string
        enum:
          - ase
          - desc
        example: desc
    search:
      in: query
      name: search
      description: Data Search params
      schema:
        type: string
        example: hello
    idPathParam:
      in: path
      name: id
      required: true
      description:  Id
      schema:
        type: integer
        format: int32
        example: 1
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              message:
                type: string
                example: Bad Request!
              errors:
                $ref: '#/components/schemas/400'
    '401':
      description: Unauthenticated
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthenticated
              message:
                type: string
                example: You are not an authenticated user
    '403':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 403
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You don't have the right permissions
    '404':
      description: Resource Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Requested resource not found
    '405':
      description: Method Not Allowed
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 405
              error:
                type: string
                example: Method Not Allowed
              message:
                type: string
                example: You are hiting on a invalid method
    '500':
      description: Server Error Occur
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Server Error
              message:
                type: string
                example: Server Not Responding! Try again later.
  schemas:
    pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
      required:
        - page
        - limit
        - totalPage
        - totalItems
    '400':
      type: array
      items:
        type: object
        properties:
          fields:
            type: string
            example: username
          message:
            type: string
            example: username max length is 20 Letters
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: datetime
          example: '2023-07-20T02:14:06.058Z'
        updatedAt:
          type: string
          format: datetime
          example: '2023-07-20T02:14:06.058Z'
      required:
        - createdAt
        - updatedAt
    uniqueIdDTO:
      type: string
      example: 60ef9c35e892b1452c59f2e3
    userBodyDTO:
      type: object
      properties:
        id:
          type: string
          example: 60ef9c35e892b1452c59f2e3
        username:
          type: string
          example: muniraweb
        email:
          type: string
          format: email
          example: muniraweb@gmail.com
        is_admin:
          type: boolean
          example: false
    plattersBodyDTO:
      type: object
      properties:
        firstColor:
          type: string
          format: code
          example: "#fff"
        secondColor:
          type: string
          format: code
          example: "#000"
        thirdColor:
          type: string
          format: code
          example: "#111"
        forthColor:
          type: string
          format: code
          example: "#777"
        status:
          type: string
          example: publish
          enum: ['publish' , 'unpublish']
    tagDTO:
      type: object
      properties:
        id: 
          $ref : '#/components/schemas/uniqueIdDTO'
        name:
          type: string
          format: text
          example: "pink"
        slug:
          type: string
          format: text
          example: "pink"
    reports:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            reports:
              type: string
              format: text
              example: This is a report text
            userId:
              type: integer
              format: int32
              example: 1
            platterId:
              type: integer
              format: int32
              example: 1
          required:
            - id
            - reports
            - userId
            - platterId
        - $ref: '#/components/schemas/Timestamp'
    settings:
      allOf:
        - type: object
          properties:
            id:
              $ref : '#/components/schemas/uniqueIdDTO'
            logo:
              type: string
              format: url
              example: www.s3.aws.com/instance/logo.png
            favicon:
              type: string
              format: url
              example: www.s3.aws.com/instance/favicon.png
            title:
              type: string
              format: text
              example: Color Hunt
            description:
              type: string
              format: text
              example: This is an clone of color hunt
            author:
              type: string
              format: text
              example: Munira AKter
            about:
              type: string
              format: text
              example: This is an clone of color hunt
    settingsRequestBody:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/settings'
    settingsResponseBody:
      type: object
      properties:
        data:
          allOf:
            - $ref: '#/components/schemas/settings'
            - $ref: '#/components/schemas/Timestamp'
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: api/v1/settings
    pages:
      allOf:
        - type: object
          properties:
            id:
              $ref : '#/components/schemas/uniqueIdDTO'
            url:
              type: string
              format: url
              example: www.s3.aws.com/instance/logo.png
            content:
              type: string
              format: ling Text
              example: <h1> Hello </h1>
            title:
              type: string
              format: text
              example: Color Hunt
            description:
              type: string
              format: text
              example: This is an clone of color hunt
            status:
              type: string
              format: text
              example: publish
            keywords:
              type: string
              format: text
              example: keyword1, keyword2
    pagesRequestBody:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/pages'
    pagesResponseBody:
      type: object
      properties:
        data:
          allOf:
            - $ref: '#/components/schemas/pages'
            - $ref: '#/components/schemas/Timestamp'
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: api/v1/pages
    UserAuthDTO:
      type: object
      properties:
        access_token:
          type: string
          format: JWT Token
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        refresh_token:
          type: string
          format: JWT Token
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        user:
          $ref: '#/components/schemas/userBodyDTO'
          
          
          
          
          
          
          
          
           